pre-commit:
  parallel: true  # Roda tudo em paralelo = mais r√°pido
  commands:
    fmt:
      glob: "*.go"
      run: gofmt -w {staged_files}
      stage_fixed: true  # Adiciona as mudan√ßas automaticamente
    
    lint:
      glob: "*.go" 
      run: golangci-lint run --fix {staged_files}
      stage_fixed: true
    
    test:
      glob: "*.go"
      run: go test -short -race ./...

# Hook para validar mensagem do commit (conventional commits)
commit-msg:
  commands:
    check-message:
      run: |
        # L√™ a mensagem do commit
        MSG=$(head -1 {1})
        
        # Regex para validar conventional commits
        PATTERN="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore)(\(.+\))?: .{3,}"
        
        if ! echo "$MSG" | grep -qE "$PATTERN"; then
          echo ""
          echo "‚ùå Mensagem de commit inv√°lida!"
          echo ""
          echo "üìù Use o formato: tipo(escopo): descri√ß√£o"
          echo ""
          echo "Tipos v√°lidos:"
          echo "  feat     - Nova funcionalidade"
          echo "  fix      - Corre√ß√£o de bug"
          echo "  docs     - Mudan√ßas na documenta√ß√£o"
          echo "  style    - Formata√ß√£o, ponto e v√≠rgula, etc"
          echo "  refactor - Refatora√ß√£o de c√≥digo"
          echo "  perf     - Melhoria de performance"
          echo "  test     - Adi√ß√£o ou corre√ß√£o de testes"
          echo "  build    - Mudan√ßas no build/depend√™ncias"
          echo "  ci       - Mudan√ßas na CI/CD"
          echo "  chore    - Outras mudan√ßas (configs, etc)"
          echo ""
          echo "Exemplos v√°lidos:"
          echo "  feat: adiciona endpoint de usu√°rios"
          echo "  fix: corrige valida√ß√£o de email"
          echo "  feat(auth): implementa login com JWT"
          echo ""
          exit 1
        fi
        
        echo "‚úÖ Mensagem de commit v√°lida!"

pre-push:
  commands:
    full-test:
      run: |
        echo "üß™ Rodando testes completos..."
        go test -v -race -cover ./...
